;(function (w) {
  if ( !w['EventSource'] ) {
    // parseUri 1.2.2
    // (c) Steven Levithan <stevenlevithan.com>
    // MIT License
    var parseUri = function(str) {
      var o = {
          key: ['source','protocol','authority','userInfo','user','password','host','port','relative','path','directory','file','query','anchor'],
          q: {
            name: 'queryKey',
            parser: /(?:^|&)([^&=]*)=?([^&]*)/g
          },
          parser: {
            strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
          }
        },
        m = o.parser.strict.exec(str),
        uri = {},
        i = 14;

      while (i--) uri[o.key[i]] = m[i] || '';

      uri[o.q.name] = {};
      uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
        if ($1) uri[o.q.name][$1] = $2;
      });

      return uri;
    };


    // EventSource implementation
    function EventSource( resource ) {

      var that = (this === window) ? {} : this,
          retry = 1000, offset = 0,
          boundary = "\n", queue = [], origin = '',
          lastEventId = null, xhr = null, source = null, matches = null, resourceLocation = null;

      var bufferData = '', bufferName = 'message';

      that.toString = function () { return '[object EventSource]' };

      // EventSource listener
      that.addEventListener = function (type, listener, useCapture) {
        document.addEventListener(type, listener, useCapture);
      };
      // EventSource dispatcher
      that.dispatchEvent = function (event) {
        document.dispatchEvent(event);
      };

      resourceLocation = parseUri(resource);

      // same origin policy
      if ( resource.match(/http/) && resource.match(/http/).length ) {
        if ( resourceLocation.host !== location.host ) {
          throw DOMException;//"SECURITY_ERR: DOM Exception";
        }
      }
      that.URL = resourceLocation.source;

      var openConnectionXHR = function() {

        xhr = new XMLHttpRequest();
        xhr.open('GET', that.URL, true);

        // FIRE OPEN EVENT
        var openEvent = null;
        if(document.createEvent) {
            openEvent = document.createEvent('UIEvents');
            openEvent.initEvent('open', true, true);
            openEvent.origin = document.domain;
            openEvent.source = null;
            that.dispatchEvent(openEvent);
        }
        else if (document.createEventObject) {
            // IE 
            openEvent = document.createEventObject();
            openEvent.origin = document.domain;
            that.fireEvent( 'onopen', openEvent );
        }

        if ( lastEventId ) {
          xhr.setRequestHeader('Last-Event-ID', lastEventId);
        }
        xhr.onreadystatechange = function() {
          switch (xhr.readyState) {
            case 4: // disconnect case
              pseudoDispatchEvent(true);
              reOpenConnectionXHR();
              break;
            case 3: // new data
              processMessageFromXHR();
              break;
          }
        }

        xhr.send(null);
      }

      var reOpenConnectionXHR = function() {
        xhr = null;
        offset = 0;
        setTimeout(openConnectionXHR, retry);
        bufferData = '';
        bufferName = 'message';
      }

      var processMessageFromXHR = function() {
        var data =  xhr.responseText.substr(offset)
        offset += data.length

        if (!data.length) {
            return;
        }

        var stream = data.split(boundary);
        for ( var i = 0; i < stream.length; i++ ) {
          queue.push(stream[i]);
        }

        pseudoDispatchEvent();
      }

      var fireEvent = function(data, name) {
        var event = document.createEvent('UIEvents');
        // MessageEvent causes "setting a property that has only a getter" Errors

        if ( data.length > 0 ) {
          event.initEvent(name, true, true);
          event.lastEventId = lastEventId;
          event.data = data.replace(/^(\s|\u00A0)+|(\s|\u00A0)+$/g, '');
          event.origin = document.domain;
          event.source = null;
          that.dispatchEvent(event);
        }
      }

      var trim = function(text) {
          if (text.length == 0) {
              return text
          }

          text = text.replace(/^\s+/,'')
          text = text.replace(/\s+$/,'')

          return text
      }

      var pseudoDispatchEvent = function(flush) {
        var data = bufferData, name = bufferName;

        while (queue.length > 0) {
          var line = queue.shift();

          // trim line
          line = trim(line)

          if (line == '') {
              // we have a new line -> if we have data already set then fire an event
              if (data != '') {
                  fireEvent(data, name)
                  bufferData = data = '';
                  bufferName = name = 'message';
              }
              continue
          }

          var dataIndex = line.indexOf(':'), field = null, value = '';

          if (dataIndex == -1) {
            field = line;
            value = '';
          }
          else if (dataIndex == 0) {
            // Ignore Comment lines
            continue;
          }
          else {
            field = trim(line.slice(0, dataIndex))
            value = trim(line.slice(dataIndex+1))
          }

          if (field == 'event') {
            name = value;
          }

          if (field == 'id') {
            lastEventId = value;
          }

          if (field == 'retry') {
            value = parseInt(value);

            if (!isNaN(value)) {
              retry = value;
            }
          }

          if (field == 'data') {
            if (data.length > 0) {
              data += "\n";
            }

            data += value;
          }
        } // end while
        
        if (data != '') {
            if(flush == true) {
                // flush any remaining events
                fireEvent(data, name)
                bufferData = data = '';
                bufferName = name = 'message';
            }
            else {
                // store the data and the name for later use
                bufferData += data
                bufferName  = name
            }

        }
      }

      // INIT EVENT SOURCE CONNECTION
      openConnectionXHR();
    };
    window['EventSource'] = EventSource;
  }
})(window);