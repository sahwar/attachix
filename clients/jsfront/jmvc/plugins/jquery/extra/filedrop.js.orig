(function($){

    toBinary = function (data) {
            if(typeof Uint8Array == 'undefined') {
                return data;
            }

            function byteValue(x) {
                return x.charCodeAt(0) & 0xff;
            }
            var ords = Array.prototype.map.call(data, byteValue);
            var ui8a = new Uint8Array(ords);
            return ui8a.buffer;
    }

    /*
     *  Original: http://code.google.com/p/html5uploader/
     *  Original Author: http://www.weebystudio.com/
     *  Modifications from: Slavey Karadzhov <slaff at linux-bg dot org>
     *  License: New BSD License
     *
     *	Upload files to the server using HTML 5 Drag and drop the folders on your local computer
     *
     *	Tested on:
     *	Mozilla Firefox 3.6.12
     *	Google Chrome 7.0.517.41
     *	Safari 5.0.2
     *	WebKit r70732
     *
     *	The current version does not work on:
     *	Opera 10.63
     *	Opera 11 alpha
     *	IE 6+
     */
    uploader = function(dropArea, options) {

        storeData = function (actionURL, fileName, bin, fileType, fileSize, success) {
            if (bin == null) {
                bin = '';
            }
            if (fileType == '') {
                fileType = 'text/plain';
            }

            var boundary = "boundary"+(new Date()).getTime() + parseInt(Math.random()*3000);
            var body = '--' + boundary + "\r\n";
            body += 'Content-Disposition: form-data; name="upload"; filename="' + encodeURIComponent(fileName) + '"'+"\r\n";
            body += 'Content-Length: ' + fileSize +"\r\n";
            body += "Content-Type: "+ fileType +"\r\n\r\n";
            /*
            if (type.indexOf('text/') != 0) {
                bin = toBinary(bin)
            }
            */
            body += bin + "\r\n";

            // add extra data to the request
            if (options['data'] != {}) {
                for(var name in options['data']) {
                    body += '--' + boundary + "\r\n";
                    body += 'Content-Disposition: form-data; name="'+name+'"'+"\r\n\r\n";
                    body += options['data'][name]+"\r\n";
                }
            }

            body += '--' + boundary + '--' + "\r\n";

            jQuery.ajax({
                'url': actionURL,
                'type': 'POST',
                //'jsonp': 'cb',
                //'dataType': 'jsonp',
                'dataType': 'json',
                'contentType': 'multipart/form-data; boundary=' + boundary,
                'data': body,
                'processData': false,
                'success': success,
                'error': options['error'],
                'beforeSend': function(xhr, settings) {
                    if (typeof xhr.sendAsBinary ==  'function') {
                        xhr.send = xhr.sendAsBinary
                    }

                    var source = xhr.upload || xhr;
                    jQuery(source).bind('progress', function(event) {
                        if (event.lengthComputable) {
                            var position = event.position || event.loaded;
                            var total = event.totalSize || event.total;

                            var percentComplete = (position / total)*100;
                            options['progress'](fileName, percentComplete, event);
                        }
                    });

                    return true;
                }
            });

        }

        handleData = function(dt, targetElement, finish) {
            var actionURL = options['action'];
            if (typeof options['action'] == 'function') {
                actionURL = options['action'](targetElement)
            }
            // Cast the URL to string at this point
            actionURL = String(actionURL)

            var success = options['success']
            if (finish) {
                success = function(event) {
                    options['success'](event)
                    finish(event)
                };
            }

            var type = "application/x-moz-file-promise-url";
            if (dt.types.contains(type)) {
                var remoteURL = dt.getData(type);
                jQuery.ajax({
                    'url': remoteURL,
                    'type': 'GET',
                    'beforeSend': function(xhr, settings) {
                        if (typeof xhr.overrideMimeType !='undefined') {
                            xhr.overrideMimeType('text/plain; charset=x-user-defined');
                        }

                        return true;
                    },
                    'success': function(data) {
                        storeData(actionURL,remoteURL, data, "image/png", data.length, success)
                    }
                });
                return true;
            }
            
            return false;
        }

        // Upload image files
        upload = function(file, targetElement, finish) {
            var actionURL = options['action'];
            if (typeof options['action'] == 'function') {
                actionURL = options['action'](targetElement)
            }
            // Cast the URL to string at this point
            actionURL = String(actionURL)

            var success = options['success']
            if (finish) {
                success = function(event) {
                    options['success'](event)
                    finish(event)
                };
            }

            // Firefox 4, Chrome
            if(window.FormData) {
                var form = new FormData();
                form.append('file', file);

                var xhr = new XMLHttpRequest();
                xhr.open("POST", actionURL);
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                var source = xhr.upload || xhr;
                jQuery(source).bind('progress', function(event) {
                    if (event.lengthComputable) {
                        var position = event.position || event.loaded;
                        var total = event.totalSize || event.total;

                        var percentComplete = (position / total)*100;
                        options['progress'](file.name, percentComplete, event);
                    }
                });

                xhr.onreadystatechange = function (event) {
                  if (xhr.readyState == 4) {
                     var response = JSON.parse(xhr.responseText)
                     if(xhr.status < 400) {
                        success(response)
                     }
                     else {
                         error(response)
                     }
                  }
        	};

                xhr.send(form);

                return;
            }

            // Firefox 3.6, Chrome 6, WebKit
            if(window.FileReader) {

                // Once the process of reading file
                this.loadEnd = function(event) {
                    storeData(actionURL, file.name, event.currentTarget.result, file.type, file.size)
                }

                // Loading errors
                if (options['dropError'] && typeof options['dropError'] == "function") {
                    this.loadError = options['dropError'];
                }
                else {
                    this.loadError = function(event) {
                        if(options['status']) {
                            return;
                        }

                        var error = "";
                        switch(event.target.error.code) {
                            case event.target.error.NOT_FOUND_ERR:
                                error = 'File not found!';
                                break;
                            case event.target.error.NOT_READABLE_ERR:
                                error = 'File not readable!';
                                break;
                            case event.target.error.ABORT_ERR:
                                break;
                            default:
                                error = 'Read error.';
                        }

                        jQuery(options['status']).html(error);
                    }
                }
                
                // Reading Progress
                if (options['dropProgress'] && typeof options['dropProgress'] == "function") {
                    this.loadProgress = options['dropProgress'];
                }
                else {
                    this.loadProgress = function(event) {
                        if(!options['status']) {
                            return;
                        }

                        if (event.lengthComputable) {
                            var percentage = Math.round((event.loaded * 100) / event.total);
                            jQuery(options['status']).html('Loaded : '+percentage+'%');
                        }
                    }
                }

                // Preview images
                if (options['dropLoaded'] && typeof options['dropLoaded'] == "function") {
                    this.previewNow = options['dropLoaded'];
                }
                else {
                    this.previewNow = function(event) {
                        bin = preview.result;
                        var img = document.createElement("img");
                        img.className = 'addedIMG';
                        img.file = file;
                        img.src = bin;
                        document.getElementById(show).appendChild(img);
                    }
                }

                reader = new FileReader();
                // Firefox 3.6, WebKit
                if(reader.addEventListener) {
                    reader.addEventListener('loadend', this.loadEnd, false);
                    if (options['status'] != null)
                    {
                        reader.addEventListener('error', this.loadError, false);
                        reader.addEventListener('progress', this.loadProgress, false);
                    }

                // Chrome 7
                } else {
                    reader.onloadend = this.loadEnd;
                    if (options['status'] != null)
                    {
                        reader.onerror = this.loadError;
                        reader.onprogress = this.loadProgress;
                    }
                }
                var preview = new FileReader();
                // Firefox 3.6, WebKit
                if(preview.addEventListener) {
                    preview.addEventListener('loadend', this.previewNow, false);
                // Chrome 7
                } else {
                    preview.onloadend = this.previewNow;
                }

                // The function that starts reading the file as a binary string
                reader.readAsBinaryString(file);

                // Preview uploaded files
                if (options['show']) {
                    preview.readAsDataURL(file);
                }

            // Safari 5 does not support FileReader
            } else {
                xhr = new XMLHttpRequest();
                xhr.open('POST', actionURL, true);
                xhr.setRequestHeader('UP-FILENAME', file.name);
                xhr.setRequestHeader('UP-SIZE', file.size);
                xhr.setRequestHeader('UP-TYPE', file.type);
                xhr.send(file);

                if (options['status']) {
                    options['status'].html('Loaded : 100%');
                }
                if (options['show']) {
                    var newFile  = document.createElement('div');
                    newFile.innerHTML = 'Loaded : '+file.name+' size '+file.size+' B';
                    options['show'].appendChild(newFile);
                }
            }
        }

        // Function drop file
        this.drop = function(event) {
            event.stopPropagation();
            event.preventDefault();
            
            var dt = event.originalEvent.dataTransfer;
            var files = dt.files;

            if (!files.length) {
                handleData(dt, event.currentTarget)
                return 
            }

            for (var i = 0, max=files.length; i<max; i++) {
                var file = files[i];
                if (i == max-1) {
                    upload(file, event.currentTarget, options['finish']);
                }
                else {
                    upload(file, event.currentTarget);
                }
            }

        }

        // The inclusion of the event listeners (DragOver and drop)
        dropArea.bind('dragenter', function(event) {
            event.stopPropagation();
            jQuery(this).attr('dragenter', true);
        });
        dropArea.bind('dragover', function(event) {
            event.stopPropagation();
            event.preventDefault();
        });
        dropArea.bind('dragleave', function(event) {
            event.stopPropagation();
            jQuery(this).removeAttr('dragenter')
        });
        dropArea.bind('drop', this.drop);
    };

    $.fn.filedrop = function(options){
        var defaults = {
            'status': '',
            'action': '', // can be URL or function that gets the droped element as parameter
                        // and must return the action URL
            'list': '',
            'success': function(data) {},
            'error': function(data) {},
            'finish': function(data) {},
            'progress': function(file, percent, event) {
                
            },
            'dropError': null,
            'dropProgress': null,
            'dropLoaded': null,
            'data': {} // extra data to be send in the body of the request
        };

        var options = $.extend(defaults, options);

        jQuery(this).addClass('droparea');

        new uploader(this, options)
    };

})(jQuery);

