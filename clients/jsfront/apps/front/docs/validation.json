C({"name": "validation", "comment": " <h1 class='addFavorite'>Model Validations</h1>\n This \"mixin\" allows you to add validations to your model.  Simply overload your\n Model's \"Class\" init call and add the validations on the data fields you want\n to validate.\n<pre><code class='javascript'> jQuery.Model.extend(\"Todo\",\n {  // Static section\n\n    // Overload the init function\n    init: function() {\n       // Call the base classes constructor.\n       this._super();\n       // Will generate an error of the 'name' or 'description' fields of an\n       // instance are not set.\n       this.validatesPresenceOf(['name', 'description'], {messeage: \"must be supplied\"});\n       // Supply a function that will only validate the attribute if the test passes\n       this.validatesPresenceOf(['outcome'], {testIf : function() { return this.completed == true; }});\n    }\n },\n { // Prototype section\n   // ...\n });</code></pre>\n There are two standard options for each validation:\n <ul>\n   <li><b>message</b> - Customer message to use when the validation fail.</li>\n   <li><b>testIf</b> - Function used to test whether the validation for the\n                       specified attribute should be executed.</li>\n </ul>\n\n This plugin overloads the Model's base validate and valid functions to provide new ones.\n When the user calls, [jQuery.Model.prototype.save|save] on a model instance, the validation routines are\n executed when this plugin is included in your project.  If there are errors, [jQuery.Model.prototype.valid|valid]\n will return false.  The [jQuery.Model.prototype.errors|errors] property can be used to retrieve the\n list of errors.\n \n", "className": "page", "title": "Model Validations", "children": []})