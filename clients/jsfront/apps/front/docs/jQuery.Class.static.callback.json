C({"plugin": undefined, "name": "jQuery.Class.static.callback", "html": " ", "className": "function", "ret": {"description": "the callback function.\n   ", "type": "Function"}, "params": [{"order": 0, "description": "If a string, it represents the function to be called.  \n If it is an array, it will call each function in order and pass the return value of the prior function to the\n next function.", "name": "fname", "type": "String|Array", "optional": false}], "comment": " Returns a callback function for a function on this Class.\n The callback function ensures that 'this' is set appropriately.  \n<pre><code class='javascript'> $.Class.extend(\"MyClass\",{\n     getData : function(){\n         this.showing = null;\n         $.get(\"data.json\",this.callback('gotData'),'json')\n     },\n     gotData : function(data){\n         this.showing = data;\n     }\n },{});\n MyClass.showData();</code></pre> <h2>Currying Arguments</h2>\n Additional arguments to callback will fill in arguments on the returning function.\n<pre><code class='javascript'> $.Class.extend(\"MyClass\",{\n    getData : function(<b>callback</b>){\n      $.get(\"data.json\",this.callback('process',<b>callback</b>),'json');\n    },\n    process : function(<b>callback</b>, jsonData){ //callback is added as first argument\n        jsonData.processed = true;\n        callback(jsonData);\n    }\n },{});\n MyClass.getData(showDataFunc)</code></pre> <h2>Nesting Functions</h2>\n Callback can take an array of functions to call as the first argument.  When the returned callback function\n is called each function in the array is passed the return value of the prior function.  This is often used\n to eliminate currying initial arguments.\n<pre><code class='javascript'> $.Class.extend(\"MyClass\",{\n    getData : function(callback){\n      //calls process, then callback with value from process\n      $.get(\"data.json\",this.callback(['process2',callback]),'json') \n    },\n    process2 : function(type,jsonData){\n        jsonData.processed = true;\n        return [jsonData];\n    }\n },{});\n MyClass.getData(showDataFunc);</code></pre>", "tags": undefined})