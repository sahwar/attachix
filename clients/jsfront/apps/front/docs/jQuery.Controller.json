C({"name": "jQuery.Controller", "children": [{"name": "jQuery.Controller.static", "className": "static", "title": undefined, "hide": false}, {"name": "jQuery.Controller.static.init", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.static.onDocument", "className": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Controller.static.register", "className": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype", "className": "prototype", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.init", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.called", "className": "attribute", "title": undefined, "hide": true}, {"name": "jQuery.Controller.prototype.element", "className": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.destroy", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.find", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.publish", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Controller.prototype.view", "className": "function", "title": undefined, "hide": false}], "author": undefined, "inherits": "jQuery.Class", "alias": undefined, "comment": " <p>Controllers organize event handlers through the power of <b>[jQuery.fn.delegate|event delegation]</b>. \n If something happens in your application (a user click or a [jQuery.Model|Model] instance being updated), \n a controller should respond to it. </p>\n \n <h3>Benefits</h3>\n <ul>\n     <li><i>Controllers let you know where your code is!</i><p>\n         Controllers force you to group events and label your html in specific ways.  The result is that\n         if an event happens on the page, you know exactly where to find the code for that event.</p></li>\n     <li><i>Controllers are inheritable.</i><p>\n         Package, inherit, and reuse your widgets.</p></li>\n     <li><i>Don't attach event handlers, make rules.</i><p>\n         Controllers use event delegation.</p></li>\n </ul>\n Check out the [http://javascripttraining.s3.amazonaws.com/14_controller/Controller.ppt Controller.ppt]\n \n <h3>Example</h3>\n<pre><code class='javascript'>//Instead of:\n$(function(){\n  $('#tasks').click(someCallbackFunction1)\n  $('#tasks .task').click(someCallbackFunction2)\n  $('#tasks .task .delete').click(someCallbackFunction3)\n});\n\n//do this\n$.Controller.extend('TasksController',{\n  'click': function(){...},\n  '.task click' : function(){...},\n  '.task .delete' : function(){...}\n})\n$().tasks_controller();</code></pre> <h2>Using Controllers</h2>\n <p>A Controller is just a list of functions that get called back when the appropriate event happens.  \n The name of the function provides a description of when the function should be called.  By naming your functions in the correct way,\n Controller recognizes them as <b>[jQuery.Controller.Action Actions]</b> and hook them up in the correct way.</p>\n \n <p>The 'hook up' happens when you create a [jQuery.Controller.prototype.init|new controller instance].</p>\n \n <p>Lets look at a very basic example.  \n Lets say you have a list of todos and a button you want to click to create more.\n Your HTML might look like:</p>\n<pre><code class='html'>&lt;div id='todos'>\n    &lt;ol>\n      &lt;li class=\"todo\">Laundry&lt;/li>\n      &lt;li class=\"todo\">Dishes&lt;/li>\n      &lt;li class=\"todo\">Walk Dog&lt;/li>\n    &lt;/ol>\n    &lt;a id=\"create_todo\">Create&lt;/a>\n&lt;/div></code></pre>To add a mousover effect and create todos, your controller class might look like:\n<pre><code class='javascript'>$.Controller.extend('TodosController',{\n  \".todo mouseover\" : function(el, ev){\n      el.css(\"backgroundColor\",\"red\")\n  },\n  \".todo mouseout\" : function(el, ev){\n      el.css(\"backgroundColor\",\"\")\n  },\n  \"#create_todo click\" : function(){\n      this.find(\"ol\").append(\"&lt;li class='todo'>New Todo&lt;/li>\"); \n  }\n})</code></pre>Now that you've created the controller class, you've got attach the event handlers on the '#todos' div by\ncreating [jQuery.Controller.prototype.init|a new controller instance].  There are 2 ways of doing this.\n<pre><code class='javascript'>//1. Create a new controller directly:\nnew TodosController($('#todos')[0]);\n//2. Use jQuery function\n$('#todos').todos_controller();</code></pre>\nAs you've likely noticed, when the [jQuery.Controller.static.init|controller class is created], it creates helper\nfunctions on [jQuery.fn]. The \"#todos\" element is known as the <b>delegated</b> element.\n<h3>How Controllers work</h3>\n<ol>\n    <li>A new controller is created:\n<pre><code class='javascript'>$('#todos').todos_controller();</code></pre>    </li>\n    <li>[jQuery.Controller.prototype.init Controller's init] checks if function names have words like click, mouseover, subscribe. </li>\n    <li>If a function does, it sets that function to be called when appropriate.</li>\n</ol>\n\n\n<h3>Action Types</h3>\n<p>Controller uses actions to match function names and attach events.  \nBy default, Controller will match [jQuery.Controller.Action.Event|Event] and [jQuery.Controller.Action.Subscribe|Subscribe] actions. \nTo match other actions, include their plugins.</p>\n<table>\n\t<tr>\n        <th>Action</th><th>Events</th><th>Example</th><th>Description</th>\n    </tr>\n    <tbody  style=\"font-size: 11px;\">\n    <tr>\n        <td>[jQuery.Controller.Action.Event Event]</td>\n        <td>change click contextmenu dblclick keydown keyup keypress mousedown mousemove mouseout mouseover mouseup reset \n            windowresize resize windowscroll scroll select submit dblclick focus blur load unload ready hashchange</td>\n        <td>\"a.destroy click\"</td>\n        <td>Matches standard DOM events</td>\n    </tr>\n    <tr>\n        <td>[jQuery.Controller.Action.Subscribe Subscribe]</td>\n        <td>Any <a href=\"http://www.openajax.org/index.php\">openajax</a> event</td>\n        <td>\"todos.*.create subscribe\"</td>\n        <td>Subscribes this action to OpenAjax hub.</td>\n    </tr>\n    <tr>\n        <td>[jQuery.Controller.Action.Drag Drag]</td>\n        <td>draginit dragend dragmove</td>\n        <td>\".handle draginit\"</td>\n        <td>Matches events on a dragged object</td>\n    </tr>\n    <tr>\n        <td>[jQuery.Controller.Action.Drop Drop]</td>\n        <td>dropover dropon dropout dropinit dropmove dropend</td>\n        <td>\".droparea dropon\"</td>\n        <td>Matches events on a droppable object</td>\n    </tr>\n    <tr>\n        <td>[jQuery.Controller.Action.Lasso Lasso]</td>\n        <td>lassoinit lassoend lassomove</td>\n        <td>\"#lassoarea lassomove\"</td>\n        <td>Allows you to lasso elements.</td>\n    </tr>\n    <tr>\n        <td>[jQuery.Controller.Action.Selectable Selectable]</td>\n        <td>selectover selected selectout selectinit selectmove selectend</td>\n        <td>\".selectable selected\"</td>\n        <td>Matches events on elements that can be selected by the lasso.</td>\n    </tr>\n    </tbody>\n</table>\n\n<h3>Callback Parameters</h3>\nFor most actions, the first two parameters are always:\n<ul>\n    <li>el - the jQuery wrapped element.</li>\n    <li>ev - the jQuery wrapped DOM event.</li>\n</ul>\n<pre><code class='javascript'>\".something click\" : function(el, ev){\n   el.slideUp()\n   ev.stopDelegation();  //stops this event from delegating to any other\n                         // delegated events for this delegated element.\n   ev.preventDefault();  //prevents the default action from happening.\n   ev.stopPropagation(); //stops the event from going to other elements.\n}</code></pre>\nIf the action provides different parameters, they are in each action's documentation.\n<h2>Types of Controllers</h2>\nThere are 2 types of controllers: Document and Element Controllers.  The serve different purposes although work \nvery similar.\n<h3>Element Controllers</h3>\n<p>Element Controllers attach delegated event handlers on an element when a new controller is created.\n  Element controllers are great at creating reusable plugins as there can be many instances of an Element controller\n  on the page at once.  They also perform better then Document Controllers.\n</p>\n<p>To create a Element Controller <b>Class</b>, extend the $.Controller class like:</p>\n<pre><code class='javascript'>$.Controller.extend(\"NameOfController\",{\n   \"a.destroy click\" : function(el, ev){}\n})</code></pre><p>Then attach a new instance of this controller to an element:</p>\n<pre><code class='javascript'>$(\"#some .selector\").name_of_controller()</code></pre><p>Now \"a.destroy click\" will be called when someone clicks on \"#some .selector a.destroy click\".</p>\n<h3>Document Controllers</h3>\n<p>\nDocument Controllers delegate on the documentElement.  You don't have to attach an instance as this will be done\nfor you when the controller class is created.  Document Controllers, with the exception of MainControllers,\nadd an implicit '#CONTROLLERNAME' before every selector.\n</p>\n<p>To create a document controller, you just have to set the controller's [jQuery.Controller.static.onDocument static onDocument]\nproperty to true.</p> \n<pre><code class='javascript'>$.Controller.extend('TodosController',\n{onDocument: true},\n{\n  \".todo mouseover\" : function(el, ev){ //matches #todos .todo\n      el.css(\"backgroundColor\",\"red\")\n  },\n  \".todo mouseout\" : function(el, ev){ //matches #todos .todo\n      el.css(\"backgroundColor\",\"\")\n  },\n  \"#create click\" : function(){        //matches #todos #create\n      this.find(\"ol\").append(\"&lt;li class='todo'>New Todo&lt;/li>\"); \n  }\n})</code></pre><p>DocumentControllers are typically used for page layout and functionality that is \nextremely unlikely to be repeated such as a SidebarController.  \nOften, a Document Controller's <b>\"ready\"</b> event will be used to create\nnecessary Element Controllers.</p>\n<pre><code class='javascript'>$.Controller.extend('SidebarController',\n{onDocument: true},\n{\n  <b>ready</b> : function(){\n      $(\".slider\").slider_controller()\n  },\n  \"a.tag click\" : function(){..}\n})</code></pre><h3>MainControllers</h3>\n<p>MainControllers are documentControllers that do not add '#CONTROLLERNAME' before every selector.  This controller\nshould only be used for page wide functionality and setup.</p>\n<pre><code class='javascript'>$.Controller.extend(\"MainController\",{\n  hasActiveElement : document.activeElement || false\n},{\n  focus : funtion(el){\n     if(!this.Class.hasActiveElement)\n         document.activeElement = el[0] //tracks active element\n  }\n})</code></pre><h2>Controller Initialization</h2>\n<p>It can be extremely useful to overwrite [jQuery.Controller.prototype.init Controller.prototype.init] with \nsetup functionality for your widget. </p>\n<p>In the following example, I create a controller that when created, will put a message as the content of the element:</p>\n<pre><code class='javascript'>$.Controller.extend(\"SpecialController\",\n{\n  init : function(el, message){\n     this._super(el)\n     this.element.html(message)\n  }\n})\n$(\".special\").special_controller(\"Hello World\")</code></pre><p>It's extremely important to call <code>this._super(el)</code> in your init function as it will\nset <code>this.element</code> and all the event delegation on that element.</p>\n<h2>Removing Controllers</h2>\nController removal is built into jQuery.  So to remove a controller, you just have to remove its element:\n<pre><code class='javascript'>$(\".special_controller\").remove()\n$(\"#containsControllers\").html(\"\")</code></pre><p>It's important to note that if you use raw DOM methods (<code>innerHTML, removeChild</code>), the controllers won't be destroyed.</p>\n<p>If you just want to remove controller functionality, call destroy on the controller instance:</p>\n<pre><code class='javascript'>$(\".special_controller\").controller().destroy()</code></pre><h2>Accessing Controllers</h2>\n<p>Often you need to call a function on a controller, there are a few ways of doing that.  For the \nfollowing example, we assume there are 2 elements with <code>className=\"special\"</code>.</p>\n<pre><code class='javascript'>//creates 2 foo controllers\n$(\".special\").foo_controller()\n//creates 2 bar controllers\n$(\".special\").bar_controller()\n//gets all controllers on all elements:\n$(\".special\").controllers() //-> [foo, bar, foo, bar]\n//gets all foo controllers\n$(\".special\").foo_controller() //-> [foo, foo]\n//gets all bar controllers\n$(\".special\").bar_controller() //-> [bar, bar]\n//gets first controller\n$(\".special\").controller() //-> foo\n//gets foo controller via data\n$(\".special\").data(\"controllers\")[\"FooController\"] //-> foo</code></pre> \n", "className": "class", "tags": ["core"]})