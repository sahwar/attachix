C({"name": "jQuery.Class", "children": [{"name": "jQuery.Class.static.callback", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Class.static.extend", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Class.static.newInstance", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Class.static.className", "className": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Class.static.fullName", "className": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Class.static.init", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Class.static.extended", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Class.prototype", "className": "prototype", "title": undefined, "hide": false}, {"name": "jQuery.Class.prototype.init", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Class.prototype.Class", "className": "attribute", "title": undefined, "hide": false}, {"name": "jQuery.Class.prototype.callback", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.Class.static", "className": "static", "title": undefined, "hide": false}], "author": undefined, "inherits": undefined, "alias": undefined, "comment": " Class provides simple simulated inheritance in JavaScript. \n It is based off John Resig's [http://ejohn.org/blog/simple-javascript-inheritance/|Simple Class] \n Inheritance library.  Besides prototypal inheritance, it adds a few important features:\n <ul>\n     <li>Static inheritance</li>\n     <li>Class initialization callbacks</li>\n     <li>Introspection</li>\n     <li>Easy callback function creation</li>\n </ul>\n <h2>Examples</h2>\n <h3>Basic example</h3>\n Creates a class with a className (used for introspection), static, and prototype members:\n<pre><code class='javascript'> jQuery.Class.extend('Monster',\n /* @static */\n {\n   count: 0\n },\n /* @prototype */\n {\n   init : function(name){\n     this.name = name;\n     this.Class.count++\n   }\n })\n hydra = new Monster('hydra')\n dragon = new Monster('dragon')\n hydra.name        // -> hydra\n Monster.count     // -> 2\n Monster.className // -> 'Monster'</code></pre> Notice that the prototype init function is called when a new instance of Monster is created.\n <h3>Static property inheritance</h3>\n Demonstrates inheriting a class property.\n<pre><code class='javascript'> jQuery.Class.extend(\"First\",\n {\n     staticMethod : function(){ return 1;}\n },{})\n First.extend(\"Second\",{\n     staticMethod : function(){ return this._super()+1;}\n },{})\n Second.staticMethod() // -> 2</code></pre> <h3 id='introspection'>Introspection</h3>\n Often, it's nice to create classes whose name helps determine functionality.  Ruby on\n Rails's [http://api.rubyonrails.org/classes/ActiveRecord/Base.html|ActiveRecord] ORM class \n is a great example of this.  Unfortunately, JavaScript doesn't have a way of determining\n an object's name, so the developer must provide a name.  Class fixes this by taking a String name for the class.\n<pre><code class='javascript'> $.Class.extend(\"MyOrg.MyClass\",{},{})\n MyOrg.MyClass.className //-> 'MyClass'\n MyOrg.MyClass.fullName //->  'MyOrg.MyClass'</code></pre> <h3>Construtors</h3>\n Class uses static and class initialization constructor functions.  \n<pre><code class='javascript'> $.Class.extend(\"MyClass\",\n {\n   init: function(){} //static constructor\n },\n {\n   init: function(){} //prototype constructor\n })</code></pre> The static constructor is called after\n a class has been created, but before [jQuery.Class.static.extended|extended] is called on its base class.  \n This is a good place to add introspection and similar class setup code.\n \n The prototype constructor is called whenever a new instance of the class is created.\n \n \n", "className": "Constructor", "ret": {"type": "undefined", "description": ""}, "params": [], "plugin": "lang/class"})