C({"name": "jQuery.View", "children": [{"name": "jQuery.View.prototype.render", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.View.prototype.set_options", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.View.static", "className": "static", "title": undefined, "hide": false}, {"name": "jQuery.View.static.process", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.View.static.jQuery.View.config", "className": "function", "title": undefined, "hide": false}, {"name": "jQuery.View.prototype", "className": "prototype", "title": undefined, "hide": false}], "author": undefined, "inherits": undefined, "alias": undefined, "comment": " View provides <a href=\"http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/\">ERB</a> \n style client side templates.  Use them with controllers to easily build html and inject\n it into the DOM.\n <h3>Example</h3>\n The following generates a list of tasks:\n<pre><code class='html'> &lt;ul>\n &lt;% for(var i = 0; i < tasks.length; i++){ %>\n     &lt;li class=\"task &lt;%= tasks[i].identity %>\">&lt;%= tasks[i].name %>&lt;/li>\n &lt;% } %>\n &lt;/ul></code></pre> For the following examples, we assume this view is in <i>'views\\tasks\\list.ejs'</i>\n <h2>Use</h2>\n There are 2 common ways to use Views: \n <ul>\n     <li>Controller's [jQuery.Controller.prototype.view view function]</li>\n     <li>The jQuery Helpers: [jQuery.fn.after after], \n                             [jQuery.fn.append append], \n                             [jQuery.fn.before before], \n                             [jQuery.fn.before html], \n                             [jQuery.fn.before prepend], \n                             [jQuery.fn.before replace], and \n                             [jQuery.fn.before text].</li>\n </ul>\n <h3>Render</h3>\n Render is the preferred way of rendering a view.  You can find all the options for render in \n its [jQuery.Controller.prototype.render documentation], but here is a brief example of rendering the \n <i>list.ejs</i> view from a controller:\n<pre><code class='javascript'> $.Controller.extend(\"TasksController\",{\n     init : function(el){\n         Task.findAll({},this.callback('list'))\n     },\n     list : function(tasks){\n         this.<b>render</b>({view: \"tasks/list\",    //which controller and view file\n                                             //  render would guess this by default\n                      html: this.element,    //what jQuery modifier you want to perform\n                                             //  on which element\n                      data: {tasks: tasks}}) //the data that gets passed to the view\n     }\n })</code></pre> \n <h3>jQuery Helpers</h3>\n View modifies a number of jQuery insertion methods to allow view insertion.  You can find more \n details on the helpers documentation pages <i>(linked above)</i>.\n The following are a few examples:\n<pre><code class='javascript'> $(\"#tasks\").html({view: \"views/tasks/list\", data: {tasks: tasks}})\n $(\"#tasks\").before({view: \"views/tasks/welcome\"});</code></pre> \n <h2>Including Views</h2>\n Include can package processed views in the production file.  After loading the include plugin, you\n can use [include.static.views] wrapped in an include callback function.  Because included views are already\n processed, they don't rely on eval.  Here's how to include them:\n<pre><code class='javascript'> include.plugins('view','controller')\n include.controllers('tasks');\n include(function(){\n   include.views('views/tasks/show');\n })</code></pre> Read more about [include.static.views include.views].\n <h2>View Helpers</h2>\n View Helpers create html code.  View by default only comes with \n [jQuery.View.Helpers.prototype.view view] and [jQuery.View.Helpers.prototype.to_text to_text].\n You can include more with the view/helpers plugin.  But, you can easily make your own!\n Learn how in the [jQuery.View.Helpers Helpers] page.\n \n", "className": "Constructor", "ret": {"type": "undefined", "description": ""}, "params": [{"description": "A hash with the following options\n <table class=\"options\">\n\t\t\t\t<tbody><tr><th>Option</th><th>Default</th><th>Description</th></tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>url</td>\n\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t<td>loads the template from a file.  This path should be relative to <i>[jQuery.root]</i>.\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>text</td>\n\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t<td>uses the provided text as the template. Example:<br/><code>new View({text: '&lt;%=user%>'})</code>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>element</td>\n\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t<td>loads a template from the innerHTML or value of the element.\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>type</td>\n\t\t\t\t\t<td>'<'</td>\n\t\t\t\t\t<td>type of magic tags.  Options are '&lt;' or '['\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>name</td>\n\t\t\t\t\t<td>the element ID or url </td>\n\t\t\t\t\t<td>an optional name that is used for caching.\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>cache</td>\n\t\t\t\t\t<td>true in production mode, false in other modes</td>\n\t\t\t\t\t<td>true to cache template.\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t\n\t\t\t</tbody></table>\n ", "type": "Object", "optional": false, "order": 0, "name": "options"}], "plugin": "view"})